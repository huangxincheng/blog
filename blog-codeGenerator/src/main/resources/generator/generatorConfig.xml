<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>

    <!-- 读取数据库配置文件 -->
    <properties resource="generator/db.properties" />


    <context id="context" targetRuntime="MyBatis3">
        <property name="javaFileEncoding" value="UTF-8"/>

        <!--默认实现序列化接口-->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin">
            <property name="addGWTInterface" value="false" />
            <property name="suppressJavaInterface" value="false" />
        </plugin>
        <!--给实体类添加toString方法-->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin" />
        <!--生成的java对象模型自动添加hashCode()和Equals()方法-->
        <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/>


        <commentGenerator>
            <!-- 这个元素用来去除指定生成的注释中是否包含生成的日期 false:表示保护 -->
            <!-- 如果生成日期，会造成即使修改一个字段，整个实体类所有属性都会发生变化，不利于版本控制，所以设置为true -->
            <property name="suppressDate" value="true" />
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="true" />
        </commentGenerator>

        <!-- 数据库相关 -->
        <jdbcConnection driverClass="${db.driverClass}"
                        connectionURL="${db.connectionURL}"
                        userId="${db.userId}"
                        password="${db.password}"/>




        <javaTypeResolver>
            <!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） -->
            <property name="forceBigDecimals" value="false" />
        </javaTypeResolver>

        <!-- 生成模型的包名和位置 -->
        <javaModelGenerator targetPackage="${javaModelGenerator.targetPackage}"
                            targetProject="src/main/java">
            <property name="enableSubPackages" value="true" />
            <!-- 从数据库返回的值被清理前后的空格  -->
            <property name="trimStrings" value="true" />
        </javaModelGenerator>

        <!-- 生成映射文件的包名和位置 -->
        <sqlMapGenerator targetPackage="${mapperXml.targetPackage}"
                         targetProject="src/main/resources">
            <property name="enableSubPackages" value="true" />
        </sqlMapGenerator>

        <!-- 生成DAO的包名和位置 -->
        <javaClientGenerator type="XMLMAPPER"
                             targetPackage="${javaDaoGenerator.targetPackage}"
                             targetProject="src/main/java">
            <property name="enableSubPackages" value="true" />
        </javaClientGenerator>

        <!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素
           选择的table会生成一下文件：
           1，SQL map文件
           2，生成一个主键类；
           3，除了BLOB和主键的其他字段的类；
           4，包含BLOB的类；
           5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；
           6，Mapper接口（可选）
           tableName（必要）：要生成对象的表名；
           注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会
               根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：
               1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；
               2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；
               3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；
               4，否则，使用指定的大小写格式查询；
           另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；
           这个时候，请设置delimitIdentifiers="true"即可保留大小写格式；
           可选：
           1，schema：数据库的schema；
           2，catalog：数据库的catalog；
           3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName
           4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；
           5，enableInsert（默认true）：指定是否生成insert语句；
           6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
           7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；
           8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
           9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
           10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；
           11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
           12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
           13，modelType：参考context元素的defaultModelType，相当于覆盖；
           14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
           15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性
           注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；
        -->
        <table tableName="kw_user" domainObjectName="User"
               enableCountByExample="false" enableUpdateByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false"
               selectByExampleQueryId="false">
            <generatedKey column="id" sqlStatement="SELECT LAST_INSERT_ID()" identity="true"/>
            <!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；
               column:要重新设置的列名；
               注意，一个table元素中可以有多个columnOverride元素哈~-->
                <!-- <columnOverride column="username">
                     - 使用property属性来指定列要生成的属性名称
                     <property name="property" value="userName"/>-->

                <!-- javaType用于指定生成的domain的属性类型，使用类型的全限定名
                <property name="javaType" value=""/>
                 -->

                <!-- jdbcType用于指定该列的JDBC类型
                <property name="jdbcType" value=""/>
                 -->

                <!-- typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名
                    注意，mybatis中，不会生成到mybatis-config.xml中的typeHandler
                    只会生成类似：where id = #{id,jdbcType=BIGINT,typeHandler=com._520it.mybatis.MyTypeHandler}的参数描述
                <property name="jdbcType" value=""/>
                -->

                <!-- 参考table元素的delimitAllColumns配置，默认为false
                <property name="delimitedColumnName" value=""/>
                 -->
                <!--></columnOverride> -->

                <!-- ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现
                   column:指定要忽略的列的名字；
                   delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false

                   注意，一个table元素中可以有多个ignoreColumn元素
                <ignoreColumn column="deptId" delimitedColumnName=""/>
            -->

        </table>
    </context>
</generatorConfiguration>
